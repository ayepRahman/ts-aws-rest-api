service: ts-aws-rest-api

frameworkVersion: "2"
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-1
  environment:
    DYNAMODB_TABLE: ${self:service}-dev
    # DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  createUser:
    handler: src/functions/create.createUser
    events:
      - http:
          path: users
          method: post
          cors: true
  getUsers:
    handler: src/read.getUsers
    events:
      - http:
          path: users
          method: get
          cors: true
  # getUser:
  #   handler: src/read.getUserById
  #   events:
  #     - http:
  #         path: users/{id}
  #         method: get
  #         cors: true
  # deleteUser:
  #   handler: src/delete.deleteUserById
  #   events:
  #     - http:
  #         path: users/{id}
  #         method: delete
  #         cors: true
  # updateUser:
  #   handler: src/update.updateUserById
  #   events:
  #     - http:
  #         path: users/{id}
  #         method: put
  #         cors: true

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

resources:
  Resources:
    UsersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
